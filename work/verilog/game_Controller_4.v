/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_Controller_4 (
    input clk,
    input rst,
    input [2:0] a_input,
    input a_submit,
    input [2:0] b_input,
    input b_submit,
    output reg [15:0] player_a_score_display,
    output reg [15:0] player_b_score_display,
    output reg [15:0] question_A_display,
    output reg [15:0] question_B_display,
    output reg [19:0] question_Logic_display,
    output reg [15:0] time_countdown,
    output reg [15:0] round_display,
    output reg winner_a,
    output reg winner_b
  );
  
  
  
  wire [16-1:0] M_alu_out;
  wire [3-1:0] M_alu_zvn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn_signal;
  alu_component_9 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn_signal(M_alu_alufn_signal),
    .out(M_alu_out),
    .zvn(M_alu_zvn)
  );
  
  wire [16-1:0] M_regfiles_out_a;
  wire [16-1:0] M_regfiles_out_b;
  wire [16-1:0] M_regfiles_player_a_score_display;
  wire [16-1:0] M_regfiles_player_b_score_display;
  wire [16-1:0] M_regfiles_question_A_display;
  wire [16-1:0] M_regfiles_question_B_display;
  wire [16-1:0] M_regfiles_question_Logic_display;
  wire [16-1:0] M_regfiles_time_countdown;
  wire [16-1:0] M_regfiles_round_display;
  reg [4-1:0] M_regfiles_write_address;
  reg [1-1:0] M_regfiles_we;
  reg [16-1:0] M_regfiles_data;
  reg [4-1:0] M_regfiles_read_address_a;
  reg [4-1:0] M_regfiles_read_address_b;
  reg [1-1:0] M_regfiles_init;
  reg [1-1:0] M_regfiles_reset;
  reg [1-1:0] M_regfiles_ts;
  game_regFiles_10 regfiles (
    .clk(clk),
    .rst(rst),
    .write_address(M_regfiles_write_address),
    .we(M_regfiles_we),
    .data(M_regfiles_data),
    .read_address_a(M_regfiles_read_address_a),
    .read_address_b(M_regfiles_read_address_b),
    .init(M_regfiles_init),
    .reset(M_regfiles_reset),
    .ts(M_regfiles_ts),
    .out_a(M_regfiles_out_a),
    .out_b(M_regfiles_out_b),
    .player_a_score_display(M_regfiles_player_a_score_display),
    .player_b_score_display(M_regfiles_player_b_score_display),
    .question_A_display(M_regfiles_question_A_display),
    .question_B_display(M_regfiles_question_B_display),
    .question_Logic_display(M_regfiles_question_Logic_display),
    .time_countdown(M_regfiles_time_countdown),
    .round_display(M_regfiles_round_display)
  );
  wire [1-1:0] M_controlUnit_werf;
  wire [4-1:0] M_controlUnit_ra;
  wire [4-1:0] M_controlUnit_rb;
  wire [4-1:0] M_controlUnit_rc;
  wire [2-1:0] M_controlUnit_bsel;
  wire [6-1:0] M_controlUnit_alufn_signal;
  wire [1-1:0] M_controlUnit_wdsel;
  wire [1-1:0] M_controlUnit_initReg;
  wire [1-1:0] M_controlUnit_resetReg;
  wire [1-1:0] M_controlUnit_aluResultSelect;
  wire [1-1:0] M_controlUnit_ts;
  wire [16-1:0] M_controlUnit_fsminput;
  wire [1-1:0] M_controlUnit_winner_a;
  wire [1-1:0] M_controlUnit_winner_b;
  reg [3-1:0] M_controlUnit_a_input;
  reg [1-1:0] M_controlUnit_a_submit;
  reg [3-1:0] M_controlUnit_b_input;
  reg [1-1:0] M_controlUnit_b_submit;
  reg [16-1:0] M_controlUnit_aluresult;
  game_fsm_11 controlUnit (
    .clk(clk),
    .rst(rst),
    .a_input(M_controlUnit_a_input),
    .a_submit(M_controlUnit_a_submit),
    .b_input(M_controlUnit_b_input),
    .b_submit(M_controlUnit_b_submit),
    .aluresult(M_controlUnit_aluresult),
    .werf(M_controlUnit_werf),
    .ra(M_controlUnit_ra),
    .rb(M_controlUnit_rb),
    .rc(M_controlUnit_rc),
    .bsel(M_controlUnit_bsel),
    .alufn_signal(M_controlUnit_alufn_signal),
    .wdsel(M_controlUnit_wdsel),
    .initReg(M_controlUnit_initReg),
    .resetReg(M_controlUnit_resetReg),
    .aluResultSelect(M_controlUnit_aluResultSelect),
    .ts(M_controlUnit_ts),
    .fsminput(M_controlUnit_fsminput),
    .winner_a(M_controlUnit_winner_a),
    .winner_b(M_controlUnit_winner_b)
  );
  
  reg [15:0] input_B_ALU;
  
  reg [15:0] aluOutputBackFSM;
  
  always @* begin
    M_controlUnit_a_input = a_input;
    M_controlUnit_a_submit = a_submit;
    M_controlUnit_b_input = b_input;
    M_controlUnit_b_submit = b_submit;
    M_regfiles_init = M_controlUnit_initReg;
    M_regfiles_reset = M_controlUnit_resetReg;
    M_regfiles_ts = M_controlUnit_ts;
    M_regfiles_we = M_controlUnit_werf;
    M_regfiles_read_address_a = M_controlUnit_ra;
    M_regfiles_read_address_b = M_controlUnit_rb;
    M_regfiles_write_address = M_controlUnit_rc;
    
    case (M_controlUnit_bsel)
      2'h0: begin
        input_B_ALU = M_regfiles_out_b;
      end
      2'h1: begin
        input_B_ALU = 16'h0000;
      end
      2'h2: begin
        input_B_ALU = 16'h0001;
      end
      2'h3: begin
        input_B_ALU = 16'h0005;
      end
      default: begin
        input_B_ALU = 1'h0;
      end
    endcase
    M_alu_a = M_regfiles_out_a;
    M_alu_b = input_B_ALU;
    M_alu_alufn_signal = M_controlUnit_alufn_signal;
    
    case (M_controlUnit_aluResultSelect)
      1'h1: begin
        aluOutputBackFSM = M_alu_out;
      end
      default: begin
        aluOutputBackFSM = 16'hefff;
      end
    endcase
    M_controlUnit_aluresult = aluOutputBackFSM;
    
    case (M_controlUnit_wdsel)
      1'h0: begin
        M_regfiles_data = M_alu_out;
      end
      1'h1: begin
        M_regfiles_data = M_controlUnit_fsminput;
      end
      default: begin
        M_regfiles_data = 16'h0000;
      end
    endcase
    player_a_score_display = M_regfiles_player_a_score_display;
    player_b_score_display = M_regfiles_player_b_score_display;
    question_A_display = M_regfiles_question_A_display;
    question_B_display = M_regfiles_question_B_display;
    time_countdown = M_regfiles_time_countdown;
    round_display = M_regfiles_round_display;
    winner_a = M_controlUnit_winner_a;
    winner_b = M_controlUnit_winner_b;
    
    case (M_regfiles_question_Logic_display)
      3'h0: begin
        question_Logic_display[15+4-:5] = 5'h0a;
        question_Logic_display[10+4-:5] = 5'h14;
        question_Logic_display[5+4-:5] = 5'h0d;
        question_Logic_display[0+4-:5] = 5'h1f;
      end
      3'h1: begin
        question_Logic_display[15+4-:5] = 5'h14;
        question_Logic_display[10+4-:5] = 5'h0a;
        question_Logic_display[5+4-:5] = 5'h14;
        question_Logic_display[0+4-:5] = 5'h0d;
      end
      3'h2: begin
        question_Logic_display[15+4-:5] = 5'h00;
        question_Logic_display[10+4-:5] = 5'h10;
        question_Logic_display[5+4-:5] = 5'h1f;
        question_Logic_display[0+4-:5] = 5'h1f;
      end
      3'h3: begin
        question_Logic_display[15+4-:5] = 5'h14;
        question_Logic_display[10+4-:5] = 5'h00;
        question_Logic_display[5+4-:5] = 5'h10;
        question_Logic_display[0+4-:5] = 5'h1f;
      end
      3'h4: begin
        question_Logic_display[15+4-:5] = 5'h13;
        question_Logic_display[10+4-:5] = 5'h00;
        question_Logic_display[5+4-:5] = 5'h10;
        question_Logic_display[0+4-:5] = 5'h1f;
      end
      3'h5: begin
        question_Logic_display[15+4-:5] = 5'h14;
        question_Logic_display[10+4-:5] = 5'h13;
        question_Logic_display[5+4-:5] = 5'h00;
        question_Logic_display[0+4-:5] = 5'h10;
      end
      default: begin
        question_Logic_display = 20'hfffff;
      end
    endcase
  end
endmodule

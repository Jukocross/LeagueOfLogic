/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    input usb_rx,
    input [2:0] player_a_input,
    input [1:0] player_submit,
    input [2:0] player_b_input,
    output reg usb_tx,
    output reg [6:0] io_seg,
    output reg [3:0] io_sel,
    output reg [2:0] section_A_sel,
    output reg [2:0] section_B_sel,
    output reg [6:0] section_A_seg,
    output reg [6:0] section_B_seg
  );
  
  
  
  reg rst;
  reg [19:0] logic_display_segValue;
  reg [19:0] section_A_segValue;
  reg [19:0] section_B_segValue;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_buttons_player_a_submit;
  wire [1-1:0] M_buttons_player_b_submit;
  reg [2-1:0] M_buttons_io_button;
  button_controller_2 buttons (
    .clk(clk),
    .io_button(M_buttons_io_button),
    .player_a_submit(M_buttons_player_a_submit),
    .player_b_submit(M_buttons_player_b_submit)
  );
  wire [2-1:0] M_seven_seg_counter_value;
  counter_3 seven_seg_counter (
    .clk(clk),
    .rst(rst),
    .value(M_seven_seg_counter_value)
  );
  wire [16-1:0] M_game_player_a_score_display;
  wire [16-1:0] M_game_player_b_score_display;
  wire [16-1:0] M_game_question_A_display;
  wire [16-1:0] M_game_question_B_display;
  wire [20-1:0] M_game_question_Logic_display;
  wire [16-1:0] M_game_time_countdown;
  wire [16-1:0] M_game_round_display;
  wire [1-1:0] M_game_winner_a;
  wire [1-1:0] M_game_winner_b;
  reg [3-1:0] M_game_a_input;
  reg [1-1:0] M_game_a_submit;
  reg [3-1:0] M_game_b_input;
  reg [1-1:0] M_game_b_submit;
  game_Controller_4 game (
    .clk(clk),
    .rst(rst),
    .a_input(M_game_a_input),
    .a_submit(M_game_a_submit),
    .b_input(M_game_b_input),
    .b_submit(M_game_b_submit),
    .player_a_score_display(M_game_player_a_score_display),
    .player_b_score_display(M_game_player_b_score_display),
    .question_A_display(M_game_question_A_display),
    .question_B_display(M_game_question_B_display),
    .question_Logic_display(M_game_question_Logic_display),
    .time_countdown(M_game_time_countdown),
    .round_display(M_game_round_display),
    .winner_a(M_game_winner_a),
    .winner_b(M_game_winner_b)
  );
  
  wire [4-1:0] M_digit_out;
  seven_seg_select_digit_5 digit (
    .in(M_seven_seg_counter_value),
    .out(M_digit_out)
  );
  
  wire [8-1:0] M_seven_seg_value_out;
  seven_seg_select_value_negate_6 seven_seg_value (
    .in(M_seven_seg_counter_value),
    .value(logic_display_segValue),
    .out(M_seven_seg_value_out)
  );
  
  wire [8-1:0] M_section_A_seg_value_out;
  seven_seg_select_value_negate_6 section_A_seg_value (
    .in(M_seven_seg_counter_value),
    .value(section_A_segValue),
    .out(M_section_A_seg_value_out)
  );
  
  wire [8-1:0] M_section_B_seg_value_out;
  seven_seg_select_value_negate_6 section_B_seg_value (
    .in(M_seven_seg_counter_value),
    .value(section_B_segValue),
    .out(M_section_B_seg_value_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    M_buttons_io_button = player_submit;
    M_game_a_input = player_a_input;
    M_game_b_input = player_b_input;
    M_game_a_submit = M_buttons_player_a_submit;
    M_game_b_submit = M_buttons_player_b_submit;
    logic_display_segValue = M_game_question_Logic_display;
    section_A_segValue[15+4-:5] = 5'h1f;
    section_A_segValue[10+4-:5] = M_game_question_A_display[0+2-:3];
    section_A_segValue[5+4-:5] = M_game_round_display[0+2-:3];
    section_A_segValue[0+4-:5] = M_game_time_countdown[0+2-:3];
    section_B_segValue[15+4-:5] = 5'h1f;
    section_B_segValue[10+4-:5] = M_game_player_a_score_display[0+2-:3];
    section_B_segValue[5+4-:5] = M_game_player_b_score_display[0+2-:3];
    section_B_segValue[0+4-:5] = M_game_question_B_display[0+2-:3];
    io_seg = M_seven_seg_value_out[0+6-:7];
    io_sel = M_digit_out;
    section_A_sel = M_digit_out[0+2-:3];
    section_B_sel = M_digit_out[0+2-:3];
    section_A_seg = M_section_A_seg_value_out[0+6-:7];
    section_B_seg = M_section_B_seg_value_out[0+6-:7];
    if (M_game_winner_a == 1'h1) begin
      section_A_seg = 7'h00;
      section_B_seg = 7'h00;
      logic_display_segValue[15+4-:5] = 5'h0a;
      logic_display_segValue[10+4-:5] = 5'h15;
      logic_display_segValue[5+4-:5] = 5'h00;
      logic_display_segValue[0+4-:5] = 5'h14;
      io_seg = M_seven_seg_value_out[0+6-:7];
      io_sel = M_digit_out;
    end
    if (M_game_winner_b == 1'h1) begin
      section_B_seg = 7'h00;
      section_B_seg = 7'h00;
      logic_display_segValue[15+4-:5] = 5'h0b;
      logic_display_segValue[10+4-:5] = 5'h15;
      logic_display_segValue[5+4-:5] = 5'h00;
      logic_display_segValue[0+4-:5] = 5'h14;
      io_seg = M_seven_seg_value_out[0+6-:7];
      io_sel = M_digit_out;
    end
  end
endmodule

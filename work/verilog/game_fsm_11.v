/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_fsm_11 (
    input clk,
    input rst,
    input [2:0] a_input,
    input a_submit,
    input [2:0] b_input,
    input b_submit,
    input [15:0] aluresult,
    output reg werf,
    output reg [3:0] ra,
    output reg [3:0] rb,
    output reg [3:0] rc,
    output reg [1:0] bsel,
    output reg [5:0] alufn_signal,
    output reg wdsel,
    output reg initReg,
    output reg resetReg,
    output reg [0:0] aluResultSelect,
    output reg ts,
    output reg [15:0] fsminput,
    output reg winner_a,
    output reg winner_b
  );
  
  
  
  wire [1-1:0] M_randomGenerator_out;
  wire [3-1:0] M_randomGenerator_threeBitValue;
  variable_3bit_generator_20 randomGenerator (
    .clk(clk),
    .rst(rst),
    .out(M_randomGenerator_out),
    .threeBitValue(M_randomGenerator_threeBitValue)
  );
  localparam IDLE_full_fsm = 5'd0;
  localparam START_full_fsm = 5'd1;
  localparam INIT_full_fsm = 5'd2;
  localparam QUESTION_GETA_full_fsm = 5'd3;
  localparam QUESTION_GETB_full_fsm = 5'd4;
  localparam QUESTION_GETLOGIC_full_fsm = 5'd5;
  localparam QUESTION_GETANSWER_full_fsm = 5'd6;
  localparam QUESTION_GETTIMER_full_fsm = 5'd7;
  localparam COUNTDOWN_IDLE_full_fsm = 5'd8;
  localparam COUNTDOWN_LOADAINPUT_full_fsm = 5'd9;
  localparam COUNTDOWN_LOADBINPUT_full_fsm = 5'd10;
  localparam COUNTDOWN_CHECKAINPUT_full_fsm = 5'd11;
  localparam COUNTDOWN_CHECKBINPUT_full_fsm = 5'd12;
  localparam COUNTDOWN_UPDATEASCORE_full_fsm = 5'd13;
  localparam COUNTDOWN_UPDATEBSCORE_full_fsm = 5'd14;
  localparam ANSWERED_full_fsm = 5'd15;
  localparam ROUNDPLUSONE_full_fsm = 5'd16;
  localparam SETWINNERTIMER_full_fsm = 5'd17;
  localparam WINNER_full_fsm = 5'd18;
  localparam DISPLAYWINNERA_full_fsm = 5'd19;
  localparam DISPLAYWINNERB_full_fsm = 5'd20;
  localparam RESET_full_fsm = 5'd21;
  
  reg [4:0] M_full_fsm_d, M_full_fsm_q = IDLE_full_fsm;
  reg [2:0] M_previousLogic_d, M_previousLogic_q = 1'h0;
  
  always @* begin
    M_full_fsm_d = M_full_fsm_q;
    M_previousLogic_d = M_previousLogic_q;
    
    werf = 1'h0;
    ra = 1'h0;
    rb = 1'h0;
    rc = 1'h0;
    bsel = 1'h0;
    alufn_signal = 1'h0;
    wdsel = 1'h0;
    initReg = 1'h0;
    resetReg = 1'h0;
    aluResultSelect = 1'h0;
    ts = 1'h0;
    fsminput = 1'h0;
    winner_a = 1'h0;
    winner_b = 1'h0;
    
    case (M_full_fsm_q)
      START_full_fsm: begin
        if (a_submit == 1'h1 || b_submit == 1'h1) begin
          M_full_fsm_d = INIT_full_fsm;
        end
      end
      INIT_full_fsm: begin
        initReg = 1'h1;
        M_full_fsm_d = QUESTION_GETA_full_fsm;
      end
      QUESTION_GETA_full_fsm: begin
        werf = 1'h1;
        rc = 4'h3;
        wdsel = 1'h1;
        fsminput = M_randomGenerator_threeBitValue;
        M_full_fsm_d = QUESTION_GETB_full_fsm;
      end
      QUESTION_GETB_full_fsm: begin
        werf = 1'h1;
        rc = 4'h4;
        wdsel = 1'h1;
        fsminput = M_randomGenerator_threeBitValue;
        M_full_fsm_d = QUESTION_GETLOGIC_full_fsm;
      end
      QUESTION_GETLOGIC_full_fsm: begin
        if (M_previousLogic_q != M_randomGenerator_threeBitValue && M_randomGenerator_threeBitValue <= 3'h5) begin
          werf = 1'h1;
          rc = 4'h5;
          wdsel = 1'h1;
          fsminput = M_randomGenerator_threeBitValue;
          M_previousLogic_d = M_randomGenerator_threeBitValue;
          M_full_fsm_d = QUESTION_GETANSWER_full_fsm;
        end
      end
      QUESTION_GETANSWER_full_fsm: begin
        werf = 1'h1;
        ra = 4'h3;
        rb = 4'h4;
        rc = 4'h6;
        bsel = 2'h0;
        wdsel = 1'h0;
        
        case (M_previousLogic_q)
          3'h0: begin
            alufn_signal = 6'h18;
          end
          3'h1: begin
            alufn_signal = 6'h17;
          end
          3'h2: begin
            alufn_signal = 6'h1e;
          end
          3'h3: begin
            alufn_signal = 6'h11;
          end
          3'h4: begin
            alufn_signal = 6'h16;
          end
          3'h5: begin
            alufn_signal = 6'h19;
          end
          default: begin
            alufn_signal = 6'h18;
          end
        endcase
        M_full_fsm_d = QUESTION_GETTIMER_full_fsm;
      end
      QUESTION_GETTIMER_full_fsm: begin
        werf = 1'h1;
        rc = 4'h2;
        fsminput = 16'h0005;
        wdsel = 1'h1;
        M_full_fsm_d = COUNTDOWN_IDLE_full_fsm;
      end
      COUNTDOWN_IDLE_full_fsm: begin
        ts = 1'h1;
        ra = 4'h2;
        bsel = 2'h1;
        alufn_signal = 6'h33;
        aluResultSelect = 1'h1;
        if (aluresult == 1'h1) begin
          M_full_fsm_d = QUESTION_GETA_full_fsm;
        end
        if (a_submit == 1'h1) begin
          M_full_fsm_d = COUNTDOWN_LOADAINPUT_full_fsm;
        end
        if (b_submit == 1'h1) begin
          M_full_fsm_d = COUNTDOWN_LOADBINPUT_full_fsm;
        end
      end
      COUNTDOWN_LOADAINPUT_full_fsm: begin
        werf = 1'h1;
        rc = 4'h7;
        wdsel = 1'h1;
        fsminput = a_input;
        aluResultSelect = 1'h0;
        M_full_fsm_d = COUNTDOWN_CHECKAINPUT_full_fsm;
      end
      COUNTDOWN_LOADBINPUT_full_fsm: begin
        werf = 1'h1;
        rc = 4'h7;
        wdsel = 1'h1;
        fsminput = b_input;
        aluResultSelect = 1'h0;
        M_full_fsm_d = COUNTDOWN_CHECKBINPUT_full_fsm;
      end
      COUNTDOWN_CHECKAINPUT_full_fsm: begin
        ra = 4'h6;
        rb = 4'h7;
        bsel = 2'h0;
        alufn_signal = 6'h33;
        aluResultSelect = 1'h1;
        if (aluresult == 1'h1) begin
          M_full_fsm_d = COUNTDOWN_UPDATEASCORE_full_fsm;
        end
        if (aluresult == 1'h0) begin
          M_full_fsm_d = COUNTDOWN_IDLE_full_fsm;
        end
      end
      COUNTDOWN_CHECKBINPUT_full_fsm: begin
        ra = 4'h6;
        rb = 4'h7;
        bsel = 2'h0;
        alufn_signal = 6'h33;
        aluResultSelect = 1'h1;
        if (aluresult == 1'h1) begin
          M_full_fsm_d = COUNTDOWN_UPDATEBSCORE_full_fsm;
        end
        if (aluresult == 1'h0) begin
          M_full_fsm_d = COUNTDOWN_IDLE_full_fsm;
        end
      end
      COUNTDOWN_UPDATEASCORE_full_fsm: begin
        werf = 1'h1;
        ra = 4'h0;
        rc = 4'h0;
        bsel = 2'h2;
        alufn_signal = 6'h00;
        wdsel = 1'h0;
        aluResultSelect = 1'h0;
        M_full_fsm_d = ANSWERED_full_fsm;
      end
      COUNTDOWN_UPDATEBSCORE_full_fsm: begin
        werf = 1'h1;
        ra = 4'h1;
        rc = 4'h1;
        bsel = 2'h2;
        alufn_signal = 6'h00;
        wdsel = 1'h0;
        aluResultSelect = 1'h0;
        M_full_fsm_d = ANSWERED_full_fsm;
      end
      ANSWERED_full_fsm: begin
        ra = 4'h8;
        bsel = 2'h3;
        alufn_signal = 6'h33;
        aluResultSelect = 1'h1;
        if (aluresult == 1'h1) begin
          M_full_fsm_d = SETWINNERTIMER_full_fsm;
        end
        if (aluresult == 1'h0) begin
          M_full_fsm_d = ROUNDPLUSONE_full_fsm;
        end
      end
      ROUNDPLUSONE_full_fsm: begin
        werf = 1'h1;
        ra = 4'h8;
        rc = 4'h8;
        bsel = 2'h2;
        alufn_signal = 6'h00;
        wdsel = 2'h0;
        M_full_fsm_d = QUESTION_GETA_full_fsm;
      end
      SETWINNERTIMER_full_fsm: begin
        werf = 1'h1;
        rc = 4'h2;
        fsminput = 16'h0005;
        wdsel = 1'h1;
        M_full_fsm_d = WINNER_full_fsm;
      end
      WINNER_full_fsm: begin
        ra = 4'h0;
        rb = 4'h1;
        bsel = 2'h0;
        alufn_signal = 6'h35;
        aluResultSelect = 1'h1;
        if (aluresult == 1'h1) begin
          M_full_fsm_d = DISPLAYWINNERB_full_fsm;
        end
        if (aluresult == 1'h0) begin
          M_full_fsm_d = DISPLAYWINNERA_full_fsm;
        end
      end
      DISPLAYWINNERA_full_fsm: begin
        winner_a = 1'h1;
        ts = 1'h1;
        ra = 4'h2;
        bsel = 2'h1;
        alufn_signal = 6'h1b;
        aluResultSelect = 1'h1;
        if (aluresult == 1'h1) begin
          M_full_fsm_d = IDLE_full_fsm;
        end
      end
      DISPLAYWINNERB_full_fsm: begin
        winner_b = 1'h1;
        ts = 1'h1;
        ra = 4'h2;
        bsel = 2'h1;
        alufn_signal = 6'h33;
        aluResultSelect = 1'h1;
        if (aluresult == 1'h1) begin
          M_full_fsm_d = IDLE_full_fsm;
        end
      end
      IDLE_full_fsm: begin
        if (a_submit == 1'h1 || b_submit == 1'h1) begin
          M_full_fsm_d = RESET_full_fsm;
        end
      end
      RESET_full_fsm: begin
        resetReg = 1'h1;
        M_full_fsm_d = START_full_fsm;
      end
      default: begin
        M_full_fsm_d = IDLE_full_fsm;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_previousLogic_q <= 1'h0;
      M_full_fsm_q <= 1'h0;
    end else begin
      M_previousLogic_q <= M_previousLogic_d;
      M_full_fsm_q <= M_full_fsm_d;
    end
  end
  
endmodule
